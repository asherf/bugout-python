import logging
from typing import Any, Dict, List, Optional, Tuple

from .calls import make_request
from .data import BugoutUser, Method

logger = logging.getLogger(__name__)


class UserNotFound(Exception):
    """
    Raised on actions that involve user which are not present in the database.
    """


class User:
    """
    Represent a user from Bugout.
    """

    def __init__(self, url) -> None:
        self.url = url

    def _call(self, method: Method, path: str, **kwargs):
        url = f"{self.url.rstrip('/')}/{path.rstrip('/')}"
        result = make_request(method=method, url=url, **kwargs)
        return result

    def get_user(self, token: str) -> BugoutUser:
        get_user_path = "user"
        headers = {
            "Authorization": f"Bearer {token}",
        }
        result = self._call(method=Method.get, path=get_user_path, headers=headers)
        return BugoutUser(
            id=result.get("user_id"),
            username=result.get("username"),
            email=result.get("email"),
            normalized_email=result.get("normalized_email"),
            verified=result.get("verified"),
            autogenerated=result.get("autogenerated"),
            created_at=result.get("created_at"),
            updated_at=result.get("updated_at"),
        )

    def create_user(
        self,
        username: str,
        email: str,
        password: str,
        autogenerated_token: str = None,
    ):
        create_user_path = "user"
        data = {
            "username": username,
            "email": email,
            "password": password,
        }
        headers = None
        if autogenerated_token is not None:
            headers = {
                "x-bugout-installation-token": autogenerated_token,
            }
        result = self._call(
            method=Method.post, path=create_user_path, headers=headers, data=data
        )
        return BugoutUser(
            id=result.get("user_id"),
            username=result.get("username"),
            email=result.get("email"),
            normalized_email=result.get("normalized_email"),
            verified=result.get("verified"),
            autogenerated=result.get("autogenerated"),
            created_at=result.get("created_at"),
            updated_at=result.get("updated_at"),
        )
