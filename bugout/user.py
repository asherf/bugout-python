import logging
from typing import Any, Dict, List, Optional, Tuple
import uuid

from .app import Bugout
from .data import Method

logger = logging.getLogger(__name__)


class UserNotFound(Exception):
    """
    Raised on actions that involve user which are not present in the database.
    """


class User(Bugout):
    """
    Represent a user from Bugout.
    """

    def __init__(self, bugout: Bugout) -> None:
        super().__init__(bugout.url, bugout.port)

    def get_user(self, token: str) -> Optional[Dict[str, Any]]:
        get_user_path = "user"

        headers = {
            "Authorization": f"Bearer {token}",
        }

        result = super()._call(method=Method.get, path=get_user_path, headers=headers)
        return result

    def create_user(
        self,
        username: str,
        email: str,
        password: str,
        autogenerated_token: Optional[str],
    ):
        create_user_path = "user"

        data = {
            "username": username,
            "email": email,
            "password": password,
        }
        headers = None

        if autogenerated_token:
            headers = {
                "x-bugout-installation-token": autogenerated_token,
            }

        result = super()._call(
            method=Method.post, path=create_user_path, headers=headers, data=data
        )
        return result
