from typing import Any, Dict, List, Optional, Tuple

from . import data
from . import calls
from .group import Group
from .journal import Journal
from .user import User


class Bugout:
    def __init__(self, brood_api_url: str, spire_api_url: str) -> None:
        self.brood_api_url = brood_api_url
        self.spire_api_url = spire_api_url
        self.user = User(self.brood_api_url)
        self.group = Group(self.brood_api_url)
        self.journal = Journal(self.spire_api_url)

    @property
    def brood_url(self):
        return self.brood_api_url

    def brood_ping(self) -> Dict[str, str]:
        return calls.ping(self.brood_api_url)

    def spire_ping(self) -> Dict[str, str]:
        return calls.ping(self.spire_api_url)

    def get_user(self, token: str) -> data.BugoutUser:
        return self.user.get_user(token)

    def create_user(
        self,
        username: str,
        email: str,
        password: str,
        autogenerated_token: str = None,
    ) -> data.BugoutUser:
        return self.user.create_user(
            username, email, password, autogenerated_token=autogenerated_token
        )

    def get_group(self, group_id: str, token: str) -> data.BugoutGroup:
        return self.group.get_group(group_id, token)

    def get_journal(self, journal_id: str, token: str) -> data.BugoutJournal:
        return self.journal.get_journal(journal_id, token)
